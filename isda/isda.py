# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_isda', [dirname(__file__)])
        except ImportError:
            import _isda
            return _isda
        if fp is not None:
            try:
                _mod = imp.load_module('_isda', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _isda = swig_import_helper()
    del swig_import_helper
else:
    import _isda
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _isda.delete_SwigPyIterator

    def value(self):
        return _isda.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _isda.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _isda.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _isda.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _isda.SwigPyIterator_equal(self, x)

    def copy(self):
        return _isda.SwigPyIterator_copy(self)

    def next(self):
        return _isda.SwigPyIterator_next(self)

    def __next__(self):
        return _isda.SwigPyIterator___next__(self)

    def previous(self):
        return _isda.SwigPyIterator_previous(self)

    def advance(self, n):
        return _isda.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _isda.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _isda.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _isda.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _isda.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _isda.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _isda.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _isda:
_isda.SwigPyIterator_swigregister(SwigPyIterator)

class VecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _isda.VecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _isda.VecDouble___nonzero__(self)

    def __bool__(self):
        return _isda.VecDouble___bool__(self)

    def __len__(self):
        return _isda.VecDouble___len__(self)

    def __getslice__(self, i, j):
        return _isda.VecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _isda.VecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _isda.VecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _isda.VecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _isda.VecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _isda.VecDouble___setitem__(self, *args)

    def pop(self):
        return _isda.VecDouble_pop(self)

    def append(self, x):
        return _isda.VecDouble_append(self, x)

    def empty(self):
        return _isda.VecDouble_empty(self)

    def size(self):
        return _isda.VecDouble_size(self)

    def swap(self, v):
        return _isda.VecDouble_swap(self, v)

    def begin(self):
        return _isda.VecDouble_begin(self)

    def end(self):
        return _isda.VecDouble_end(self)

    def rbegin(self):
        return _isda.VecDouble_rbegin(self)

    def rend(self):
        return _isda.VecDouble_rend(self)

    def clear(self):
        return _isda.VecDouble_clear(self)

    def get_allocator(self):
        return _isda.VecDouble_get_allocator(self)

    def pop_back(self):
        return _isda.VecDouble_pop_back(self)

    def erase(self, *args):
        return _isda.VecDouble_erase(self, *args)

    def __init__(self, *args):
        _isda.VecDouble_swiginit(self, _isda.new_VecDouble(*args))

    def push_back(self, x):
        return _isda.VecDouble_push_back(self, x)

    def front(self):
        return _isda.VecDouble_front(self)

    def back(self):
        return _isda.VecDouble_back(self)

    def assign(self, n, x):
        return _isda.VecDouble_assign(self, n, x)

    def resize(self, *args):
        return _isda.VecDouble_resize(self, *args)

    def insert(self, *args):
        return _isda.VecDouble_insert(self, *args)

    def reserve(self, n):
        return _isda.VecDouble_reserve(self, n)

    def capacity(self):
        return _isda.VecDouble_capacity(self)
    __swig_destroy__ = _isda.delete_VecDouble

# Register VecDouble in _isda:
_isda.VecDouble_swigregister(VecDouble)

class VecVecdouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _isda.VecVecdouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _isda.VecVecdouble___nonzero__(self)

    def __bool__(self):
        return _isda.VecVecdouble___bool__(self)

    def __len__(self):
        return _isda.VecVecdouble___len__(self)

    def __getslice__(self, i, j):
        return _isda.VecVecdouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _isda.VecVecdouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _isda.VecVecdouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _isda.VecVecdouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _isda.VecVecdouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _isda.VecVecdouble___setitem__(self, *args)

    def pop(self):
        return _isda.VecVecdouble_pop(self)

    def append(self, x):
        return _isda.VecVecdouble_append(self, x)

    def empty(self):
        return _isda.VecVecdouble_empty(self)

    def size(self):
        return _isda.VecVecdouble_size(self)

    def swap(self, v):
        return _isda.VecVecdouble_swap(self, v)

    def begin(self):
        return _isda.VecVecdouble_begin(self)

    def end(self):
        return _isda.VecVecdouble_end(self)

    def rbegin(self):
        return _isda.VecVecdouble_rbegin(self)

    def rend(self):
        return _isda.VecVecdouble_rend(self)

    def clear(self):
        return _isda.VecVecdouble_clear(self)

    def get_allocator(self):
        return _isda.VecVecdouble_get_allocator(self)

    def pop_back(self):
        return _isda.VecVecdouble_pop_back(self)

    def erase(self, *args):
        return _isda.VecVecdouble_erase(self, *args)

    def __init__(self, *args):
        _isda.VecVecdouble_swiginit(self, _isda.new_VecVecdouble(*args))

    def push_back(self, x):
        return _isda.VecVecdouble_push_back(self, x)

    def front(self):
        return _isda.VecVecdouble_front(self)

    def back(self):
        return _isda.VecVecdouble_back(self)

    def assign(self, n, x):
        return _isda.VecVecdouble_assign(self, n, x)

    def resize(self, *args):
        return _isda.VecVecdouble_resize(self, *args)

    def insert(self, *args):
        return _isda.VecVecdouble_insert(self, *args)

    def reserve(self, n):
        return _isda.VecVecdouble_reserve(self, n)

    def capacity(self):
        return _isda.VecVecdouble_capacity(self)
    __swig_destroy__ = _isda.delete_VecVecdouble

# Register VecVecdouble in _isda:
_isda.VecVecdouble_swigregister(VecVecdouble)

class VecInteger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _isda.VecInteger_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _isda.VecInteger___nonzero__(self)

    def __bool__(self):
        return _isda.VecInteger___bool__(self)

    def __len__(self):
        return _isda.VecInteger___len__(self)

    def __getslice__(self, i, j):
        return _isda.VecInteger___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _isda.VecInteger___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _isda.VecInteger___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _isda.VecInteger___delitem__(self, *args)

    def __getitem__(self, *args):
        return _isda.VecInteger___getitem__(self, *args)

    def __setitem__(self, *args):
        return _isda.VecInteger___setitem__(self, *args)

    def pop(self):
        return _isda.VecInteger_pop(self)

    def append(self, x):
        return _isda.VecInteger_append(self, x)

    def empty(self):
        return _isda.VecInteger_empty(self)

    def size(self):
        return _isda.VecInteger_size(self)

    def swap(self, v):
        return _isda.VecInteger_swap(self, v)

    def begin(self):
        return _isda.VecInteger_begin(self)

    def end(self):
        return _isda.VecInteger_end(self)

    def rbegin(self):
        return _isda.VecInteger_rbegin(self)

    def rend(self):
        return _isda.VecInteger_rend(self)

    def clear(self):
        return _isda.VecInteger_clear(self)

    def get_allocator(self):
        return _isda.VecInteger_get_allocator(self)

    def pop_back(self):
        return _isda.VecInteger_pop_back(self)

    def erase(self, *args):
        return _isda.VecInteger_erase(self, *args)

    def __init__(self, *args):
        _isda.VecInteger_swiginit(self, _isda.new_VecInteger(*args))

    def push_back(self, x):
        return _isda.VecInteger_push_back(self, x)

    def front(self):
        return _isda.VecInteger_front(self)

    def back(self):
        return _isda.VecInteger_back(self)

    def assign(self, n, x):
        return _isda.VecInteger_assign(self, n, x)

    def resize(self, *args):
        return _isda.VecInteger_resize(self, *args)

    def insert(self, *args):
        return _isda.VecInteger_insert(self, *args)

    def reserve(self, n):
        return _isda.VecInteger_reserve(self, n)

    def capacity(self):
        return _isda.VecInteger_capacity(self)
    __swig_destroy__ = _isda.delete_VecInteger

# Register VecInteger in _isda:
_isda.VecInteger_swigregister(VecInteger)

class VecVecInteger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _isda.VecVecInteger_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _isda.VecVecInteger___nonzero__(self)

    def __bool__(self):
        return _isda.VecVecInteger___bool__(self)

    def __len__(self):
        return _isda.VecVecInteger___len__(self)

    def __getslice__(self, i, j):
        return _isda.VecVecInteger___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _isda.VecVecInteger___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _isda.VecVecInteger___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _isda.VecVecInteger___delitem__(self, *args)

    def __getitem__(self, *args):
        return _isda.VecVecInteger___getitem__(self, *args)

    def __setitem__(self, *args):
        return _isda.VecVecInteger___setitem__(self, *args)

    def pop(self):
        return _isda.VecVecInteger_pop(self)

    def append(self, x):
        return _isda.VecVecInteger_append(self, x)

    def empty(self):
        return _isda.VecVecInteger_empty(self)

    def size(self):
        return _isda.VecVecInteger_size(self)

    def swap(self, v):
        return _isda.VecVecInteger_swap(self, v)

    def begin(self):
        return _isda.VecVecInteger_begin(self)

    def end(self):
        return _isda.VecVecInteger_end(self)

    def rbegin(self):
        return _isda.VecVecInteger_rbegin(self)

    def rend(self):
        return _isda.VecVecInteger_rend(self)

    def clear(self):
        return _isda.VecVecInteger_clear(self)

    def get_allocator(self):
        return _isda.VecVecInteger_get_allocator(self)

    def pop_back(self):
        return _isda.VecVecInteger_pop_back(self)

    def erase(self, *args):
        return _isda.VecVecInteger_erase(self, *args)

    def __init__(self, *args):
        _isda.VecVecInteger_swiginit(self, _isda.new_VecVecInteger(*args))

    def push_back(self, x):
        return _isda.VecVecInteger_push_back(self, x)

    def front(self):
        return _isda.VecVecInteger_front(self)

    def back(self):
        return _isda.VecVecInteger_back(self)

    def assign(self, n, x):
        return _isda.VecVecInteger_assign(self, n, x)

    def resize(self, *args):
        return _isda.VecVecInteger_resize(self, *args)

    def insert(self, *args):
        return _isda.VecVecInteger_insert(self, *args)

    def reserve(self, n):
        return _isda.VecVecInteger_reserve(self, n)

    def capacity(self):
        return _isda.VecVecInteger_capacity(self)
    __swig_destroy__ = _isda.delete_VecVecInteger

# Register VecVecInteger in _isda:
_isda.VecVecInteger_swigregister(VecVecInteger)

class VecString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _isda.VecString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _isda.VecString___nonzero__(self)

    def __bool__(self):
        return _isda.VecString___bool__(self)

    def __len__(self):
        return _isda.VecString___len__(self)

    def __getslice__(self, i, j):
        return _isda.VecString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _isda.VecString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _isda.VecString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _isda.VecString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _isda.VecString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _isda.VecString___setitem__(self, *args)

    def pop(self):
        return _isda.VecString_pop(self)

    def append(self, x):
        return _isda.VecString_append(self, x)

    def empty(self):
        return _isda.VecString_empty(self)

    def size(self):
        return _isda.VecString_size(self)

    def swap(self, v):
        return _isda.VecString_swap(self, v)

    def begin(self):
        return _isda.VecString_begin(self)

    def end(self):
        return _isda.VecString_end(self)

    def rbegin(self):
        return _isda.VecString_rbegin(self)

    def rend(self):
        return _isda.VecString_rend(self)

    def clear(self):
        return _isda.VecString_clear(self)

    def get_allocator(self):
        return _isda.VecString_get_allocator(self)

    def pop_back(self):
        return _isda.VecString_pop_back(self)

    def erase(self, *args):
        return _isda.VecString_erase(self, *args)

    def __init__(self, *args):
        _isda.VecString_swiginit(self, _isda.new_VecString(*args))

    def push_back(self, x):
        return _isda.VecString_push_back(self, x)

    def front(self):
        return _isda.VecString_front(self)

    def back(self):
        return _isda.VecString_back(self)

    def assign(self, n, x):
        return _isda.VecString_assign(self, n, x)

    def resize(self, *args):
        return _isda.VecString_resize(self, *args)

    def insert(self, *args):
        return _isda.VecString_insert(self, *args)

    def reserve(self, n):
        return _isda.VecString_reserve(self, n)

    def capacity(self):
        return _isda.VecString_capacity(self)
    __swig_destroy__ = _isda.delete_VecString

# Register VecString in _isda:
_isda.VecString_swigregister(VecString)

class VecVecString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _isda.VecVecString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _isda.VecVecString___nonzero__(self)

    def __bool__(self):
        return _isda.VecVecString___bool__(self)

    def __len__(self):
        return _isda.VecVecString___len__(self)

    def __getslice__(self, i, j):
        return _isda.VecVecString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _isda.VecVecString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _isda.VecVecString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _isda.VecVecString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _isda.VecVecString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _isda.VecVecString___setitem__(self, *args)

    def pop(self):
        return _isda.VecVecString_pop(self)

    def append(self, x):
        return _isda.VecVecString_append(self, x)

    def empty(self):
        return _isda.VecVecString_empty(self)

    def size(self):
        return _isda.VecVecString_size(self)

    def swap(self, v):
        return _isda.VecVecString_swap(self, v)

    def begin(self):
        return _isda.VecVecString_begin(self)

    def end(self):
        return _isda.VecVecString_end(self)

    def rbegin(self):
        return _isda.VecVecString_rbegin(self)

    def rend(self):
        return _isda.VecVecString_rend(self)

    def clear(self):
        return _isda.VecVecString_clear(self)

    def get_allocator(self):
        return _isda.VecVecString_get_allocator(self)

    def pop_back(self):
        return _isda.VecVecString_pop_back(self)

    def erase(self, *args):
        return _isda.VecVecString_erase(self, *args)

    def __init__(self, *args):
        _isda.VecVecString_swiginit(self, _isda.new_VecVecString(*args))

    def push_back(self, x):
        return _isda.VecVecString_push_back(self, x)

    def front(self):
        return _isda.VecVecString_front(self)

    def back(self):
        return _isda.VecVecString_back(self)

    def assign(self, n, x):
        return _isda.VecVecString_assign(self, n, x)

    def resize(self, *args):
        return _isda.VecVecString_resize(self, *args)

    def insert(self, *args):
        return _isda.VecVecString_insert(self, *args)

    def reserve(self, n):
        return _isda.VecVecString_reserve(self, n)

    def capacity(self):
        return _isda.VecVecString_capacity(self)
    __swig_destroy__ = _isda.delete_VecVecString

# Register VecVecString in _isda:
_isda.VecVecString_swigregister(VecVecString)


def compute_isda_upfront(trade_date, maturity_date, accrual_start_date, settle_date, recovery_rate, coupon_rate, notional, is_buy_protection, swap_rates, swap_tenors, par_spread, is_rofr, holiday_filename, swap_floating_day_count_convention, swap_fixed_day_count_convention, swap_fixed_payment_frequency, swap_floating_payment_frequency, verbose):
    return _isda.compute_isda_upfront(trade_date, maturity_date, accrual_start_date, settle_date, recovery_rate, coupon_rate, notional, is_buy_protection, swap_rates, swap_tenors, par_spread, is_rofr, holiday_filename, swap_floating_day_count_convention, swap_fixed_day_count_convention, swap_fixed_payment_frequency, swap_floating_payment_frequency, verbose)

def average(i_matrix):
    return _isda.average(i_matrix)

def cds_discount_rate_ir_tenor_dates(value_date, value_dates, swap_rates, swap_tenors, verbose):
    return _isda.cds_discount_rate_ir_tenor_dates(value_date, value_dates, swap_rates, swap_tenors, verbose)

def cds_coupon_schedule(accrual_start_date, maturity_date, coupon_interval, day_count_convention, stub_method, holiday_filename, coupon_rate, notional, verbose):
    return _isda.cds_coupon_schedule(accrual_start_date, maturity_date, coupon_interval, day_count_convention, stub_method, holiday_filename, coupon_rate, notional, verbose)

def cds_index_all_in_one(trade_date, effective_date, maturity_date, value_date, accrual_start_date, recovery_rate, coupon_rate, notional, is_buy_protection, swap_rates, swap_tenors, swap_maturities, spread_rates, spread_tenors, spread_roll_tenors, imm_dates, scenario_tenors, verbose):
    return _isda.cds_index_all_in_one(trade_date, effective_date, maturity_date, value_date, accrual_start_date, recovery_rate, coupon_rate, notional, is_buy_protection, swap_rates, swap_tenors, swap_maturities, spread_rates, spread_tenors, spread_roll_tenors, imm_dates, scenario_tenors, verbose)

def cds_all_in_one(trade_date, effective_date, maturity_date, value_date, accrual_start_date, recovery_rate, coupon_rate, notional, is_buy_protection, swap_rates, swap_tenors, swap_maturities, spread_rates, spread_tenors, spread_roll_tenors, imm_dates, scenario_tenors, verbose):
    return _isda.cds_all_in_one(trade_date, effective_date, maturity_date, value_date, accrual_start_date, recovery_rate, coupon_rate, notional, is_buy_protection, swap_rates, swap_tenors, swap_maturities, spread_rates, spread_tenors, spread_roll_tenors, imm_dates, scenario_tenors, verbose)

def cds_all_in_one_exclude_ir_tenor_dates(trade_date, effective_date, maturity_date, value_date, accrual_start_date, recovery_rate, coupon_rate, notional, is_buy_protection, swap_rates, swap_tenors, spread_rates, spread_tenors, spread_roll_tenors, imm_dates, scenario_tenors, verbose):
    return _isda.cds_all_in_one_exclude_ir_tenor_dates(trade_date, effective_date, maturity_date, value_date, accrual_start_date, recovery_rate, coupon_rate, notional, is_buy_protection, swap_rates, swap_tenors, spread_rates, spread_tenors, spread_roll_tenors, imm_dates, scenario_tenors, verbose)
class Callback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def run(self, n):
        return _isda.Callback_run(self, n)
    __swig_destroy__ = _isda.delete_Callback

    def __init__(self):
        _isda.Callback_swiginit(self, _isda.new_Callback())

# Register Callback in _isda:
_isda.Callback_swigregister(Callback)


def doSomeWithCallback():
    return _isda.doSomeWithCallback()

def setCallback(cb):
    return _isda.setCallback(cb)

def factoral(n):
    return _isda.factoral(n)

def my_mod(x, y):
    return _isda.my_mod(x, y)

cvar = _isda.cvar

